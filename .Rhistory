axis.title.y = element_blank()) +
scale_fill_discrete(name = "yearBEGIN")
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays, fill=yearEND)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_fill_discrete(name = "yearBEGIN")
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays, fill=yearEND)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
df_assigment_1_notActive %>%
select(totalDays,qta_total,Frequency_total,donna,) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(totalDays,qta_total, Frequency_total,donna) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(totalDays,qta_total, Frequency_total) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(totalDays, qta_total) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(totalDays, qta_total, revenues_total, DoorAgent, StreetAgent) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
select(totalDays, qta_total, revenues_total, DoorAgent, StreetAgent) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
filter(!is.na(totalDays, qta_total, revenues_total, DoorAgent, StreetAgent)) %>%
select(totalDays, qta_total, revenues_total, DoorAgent, StreetAgent) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
na.omit() %>%
select(totalDays, qta_total, revenues_total, DoorAgent, StreetAgent) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
na.omit() %>%
select(totalDays, revenues_total, DoorAgent, StreetAgent) %>%
ggpairs(alpha = 0.3)
#Active people
df_assigment_1_notActive <- df_assigment_1 %>%
filter(yearEND > 1)
df_assigment_1_Active <- df_assigment_1 %>%
filter(yearEND < 1)
#Active customer
count(df_assigment_1_Active)
#Lost customer
count(df_assigment_1_notActive)
#Calculate how many days
df_assigment_1_notActive <- df_assigment_1_notActive %>%
mutate(totalDays = date_END - date_BEGIN)
#Calculate the median
df_assigment_1_notActive %>%
summarise(medianDuration = median(totalDays, na.rm = TRUE))
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
library(tidyverse) # the usual stuff: dplyr, readr, and other goodies
library(lubridate) # to handle dates
library(GGally) # for correlation-scatter plot matrix
library(ggfortify) # to produce residual diagnostic plots
library(rsample) # to split dataframe in training- & testing sets
library(janitor) # clean_names()
library(broom) # use broom:augment() to get tidy table with regression output, residuals, etc
library(huxtable) # to get summary table of all models produced
library(kableExtra) # for formatting tables
library(moderndive) # for getting regression tables
library(skimr) # for skim
library(mosaic)
library(leaflet) # for interactive HTML maps
library(tidytext)
library(viridis)
library(vroom)
library(kableExtra)
library(performance)
df_assigment_1 <- read_excel("datichannel2022.xlsx")
glimpse(df_assigment_1)
skim(df_assigment_1)
#Active people
df_assigment_1_notActive <- df_assigment_1 %>%
filter(yearEND > 1)
df_assigment_1_Active <- df_assigment_1 %>%
filter(yearEND < 1)
#Active customer
count(df_assigment_1_Active)
#Lost customer
count(df_assigment_1_notActive)
#Calculate how many days
df_assigment_1_notActive <- df_assigment_1_notActive %>%
mutate(totalDays = date_END - date_BEGIN)
#Calculate the median
df_assigment_1_notActive %>%
summarise(medianDuration = median(totalDays, na.rm = TRUE))
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
library(readxl)
library(tidyverse) # the usual stuff: dplyr, readr, and other goodies
library(lubridate) # to handle dates
library(GGally) # for correlation-scatter plot matrix
library(ggfortify) # to produce residual diagnostic plots
library(rsample) # to split dataframe in training- & testing sets
library(janitor) # clean_names()
library(broom) # use broom:augment() to get tidy table with regression output, residuals, etc
library(huxtable) # to get summary table of all models produced
library(kableExtra) # for formatting tables
library(moderndive) # for getting regression tables
library(skimr) # for skim
library(mosaic)
library(leaflet) # for interactive HTML maps
library(tidytext)
library(viridis)
library(vroom)
library(kableExtra)
library(performance)
df_assigment_1 <- read_excel("datichannel2022.xlsx")
glimpse(df_assigment_1)
skim(df_assigment_1)
#Active people
df_assigment_1_notActive <- df_assigment_1 %>%
filter(yearEND > 1)
df_assigment_1_Active <- df_assigment_1 %>%
filter(yearEND < 1)
#Active customer
count(df_assigment_1_Active)
#Lost customer
count(df_assigment_1_notActive)
#Calculate how many days
df_assigment_1_notActive <- df_assigment_1_notActive %>%
mutate(totalDays = date_END - date_BEGIN)
#Calculate the median
df_assigment_1_notActive %>%
summarise(medianDuration = median(totalDays, na.rm = TRUE))
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
df_assigment_1_notActive %>%
summarise(countStreetAgent = count(StreetAgent),
countDoorAgent = count(DoorAgent))
#How customer were catched
df_assigment_1_notActive %>%
summarise(countStreetAgent = count(StreetAgent),
countDoorAgent = count(DoorAgent))
df_assigment_1_notActive %>%
select(totalDays, revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(totalDays, revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
na.omit() %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(totalDays, revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
na.omit()
df_assigment_1_notActive %>%
select(totalDays, revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
na.omit()
df_assignment_1_notActive_withoutNA <- df_assigment_1_notActive %>%
select(totalDays, revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
na.omit()
df_assignment_1_notActive_withoutNA %>%
ggpairs(alpha = 0.3)
df_assignment_1_notActive_withoutNA %>%
ggpairs()
str(df_assignment_1_notActive_withoutNA)
str(df_assignment_1_notActive_withoutNA)
df_assignment_1_notActive_withoutNA <- df_assigment_1_notActive %>%
select(asInteger(totalDay), revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
na.omit() %>%
ggpairs()
df_assignment_1_notActive_withoutNA <- df_assigment_1_notActive %>%
select(asInteger(totalDay), revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
ggpairs()
df_assignment_1_notActive_withoutNA %>%
ggpairs()
df_assignment_1_notActive_withoutNA <- df_assigment_1_notActive %>%
select(asInteger(totalDay), revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
na.omit()
df_assignment_1_notActive_withoutNA %>%
ggpairs()
df_assigment_1_notActive %>%
select(asInteger(totalDay), revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(as.numeric(totalDay), revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive %>%
select(as.numeric(as.character(totalDay)), revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
ggpairs(alpha = 0.3)
df_assigment_1_notActive$totalDay <- as.numeric(as.character(df_assigment_1_notActive$totalDay))
df_assigment_1_notActive %>%
filter(!is.na(totalDay))
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
#How customer were catched
df_assigment_1_notActive %>%
summarise(countStreetAgent = count(StreetAgent),
countDoorAgent = count(DoorAgent))
df_assigment_1_notActive %>%
filter(!is.na(totalDay))
#Calculate how many days
df_assigment_1_notActive <- df_assigment_1_notActive %>%
mutate(totalDays = date_END - date_BEGIN)
#How customer were catched
df_assigment_1_notActive %>%
summarise(countStreetAgent = count(StreetAgent),
countDoorAgent = count(DoorAgent))
df_assigment_1_notActive %>%
filter(!is.na(totalDay))
#Calculate how many days
df_assigment_1_notActive <- df_assigment_1_notActive %>%
mutate(totalDays = date_END - date_BEGIN) %>%
filter(!is.na(totalDay))
#Calculate how many days
df_assigment_1_notActive <- df_assigment_1_notActive %>%
mutate(totalDays = date_END - date_BEGIN) %>%
filter(!is.na(totalDays))
df_assigment_1_notActive$totalDay <- as.numeric(as.character(df_assigment_1_notActive$totalDay))
df_assigment_1_notActive$totalDay <- as.numeric(as.character(df_assigment_1_notActive$totalDays))
df_assigment_1_notActive$totalDays <- as.numeric(as.character(df_assigment_1_notActive$totalDays))
df_assigment_1_notActive %>%
select(totalDays, revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
ggpairs(alpha = 0.3)
#Active customer
count(df_assigment_1_Active)
#Lost customer
count(df_assigment_1_notActive)
#Calculate how many days
df_assigment_1_notActive <- df_assigment_1_notActive %>%
mutate(totalDays = date_END - date_BEGIN) %>%
filter(!is.na(totalDays))
#Calculate the median
df_assigment_1_notActive %>%
summarise(medianDuration = median(totalDays, na.rm = TRUE))
df_assigment_1_notActive %>%
filter(!is.na(totalDays)) %>%
ggplot(aes(totalDays)) +
geom_histogram(binwidth = 10) +
labs(title = "Title",
subtitle = "SubTitle") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
#How customer were catched
df_assigment_1_notActive %>%
summarise(countStreetAgent = count(StreetAgent),
countDoorAgent = count(DoorAgent))
#Convert date to integer
df_assigment_1_notActive$totalDays <- as.numeric(as.character(df_assigment_1_notActive$totalDays))
df_assigment_1_notActive %>%
select(totalDays, revenues_total, Frequency_total, age, ret_year_total, qta_total) %>%
ggpairs(alpha = 0.3)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city) %>%
summarise(countActive = count(h))
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 1) %>%
summarise(countActive = count(h))
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 1) %>%
summarise(countActive = count(vpccdpro))
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 1) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) %>%
geom_bar()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 1) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) %>%
geom_col()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 1) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
#filter(mean_city == 1) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 1) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col()
library(readxl)
library(tidyverse) # the usual stuff: dplyr, readr, and other goodies
library(lubridate) # to handle dates
library(GGally) # for correlation-scatter plot matrix
library(ggfortify) # to produce residual diagnostic plots
library(rsample) # to split dataframe in training- & testing sets
library(janitor) # clean_names()
library(broom) # use broom:augment() to get tidy table with regression output, residuals, etc
library(huxtable) # to get summary table of all models produced
library(kableExtra) # for formatting tables
library(moderndive) # for getting regression tables
library(skimr) # for skim
library(mosaic)
library(leaflet) # for interactive HTML maps
library(tidytext)
library(viridis)
library(vroom)
library(kableExtra)
library(performance)
library(patchwork)
gMedian + gBig
gBig <- df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(bigcity == 1) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col()
gMedian <- df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 1) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col()
gNotMean <- df_assigment_1_Active %>%
group_by(vpccdpro) %>%
filter(mean_city == 0) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col()
gMedian + gNotMean
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col() + facet_wrap(vars(mean_city))
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col() +
facet_wrap(vars(mean_city),ncol = 1)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro),
mean_city = mean_city) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col() +
facet_wrap(vars(mean_city),ncol = 1)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro),
mean_city = mean_city) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col() +
facet_wrap(vars(mean_city),nrow =  1)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro),
mean_city = mean_city) %>%
ggplot(aes(x=vpccdpro, y=countActive))
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro),
mean_city = mean_city)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_point()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_line()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive)) +
geom_col()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
ggplot(aes(x=vpccdpro, y=countActive, fill=mean_city)) +
geom_col()
mean_city_list <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list
mean_city <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list <- mean_city$vpccdpro
mean_city_list <- mean_city$vpccdpro
mean_city <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list <- mean_city$vpccdpro
mean_city_list <- mean_city %>%
select(vpccdpro)
mean_city_list <- mean_city %>%
select(unique(vpccdpro))
mean_city_list <- mean_city %>%
select(vpccdpro)
mean_city <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list <- mean_city %>%
select(vpccdpro)
mean_city_list <- mean_city %>%
unique(select(vpccdpro))
mean_city <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list <- mean_city %>%
unique(select(vpccdpro))
mean_city_list <- mean_city %>%
select(vpccdpro)
mean_city <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list <- mean_city %>%
select(vpccdpro)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro),
medianCity = vpccdpro%in%mean_city_list) %>%
ggplot(aes(x=vpccdpro, y=countActive, fill=mean_city)) +
geom_col()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro),
medianCity = vpccdpro%in%mean_city_list)
mutate(meanCity = vpccdpro%in%mean_city_list)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
mutate(meanCity = vpccdpro%in%mean_city_list)
mean_city <- df_assigment_1 %>%
filter(mean_city == 1)
mean_city_list <- mean_city %>%
select(vpccdpro)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
mutate(meanCity = vpccdpro%in%mean_city_list)
mean_city <- df_assigment_1 %>%
filter(mean_city == 1) %>%
select(vpccdpro) %>%
pull()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
mutate(meanCity = vpccdpro%in%mean_city)
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
mutate(meanCity = vpccdpro%in%mean_city) %>%
ggplot(aes(x=vpccdpro,y=countActive,fill=meanCity)) +
geom_col()
df_assigment_1_Active %>%
group_by(vpccdpro) %>%
summarise(countActive = count(vpccdpro)) %>%
mutate(meanCity = vpccdpro%in%mean_city) %>%
mutate(vpccdpro = fct_reorder(vpccdpro, countActive)) %>%
ggplot(aes(x=vpccdpro,y=countActive,fill=meanCity)) +
geom_col()
